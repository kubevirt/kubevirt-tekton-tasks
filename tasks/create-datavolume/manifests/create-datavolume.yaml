---
apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  annotations:
    task.kubevirt.io/associatedServiceAccount: create-datavolume-task
    manifest.params.task.kubevirt.io/type: resource-yaml
    manifest.params.task.kubevirt.io/apiVersion: cdi.kubevirt.io/v1alpha1
    manifest.params.task.kubevirt.io/kind: DataVolume
    waitForSuccess.params.task.kubevirt.io/type: boolean
  labels:
    task.kubevirt.io/type: create-datavolume
  name: create-datavolume
spec:
  description: >-
    This task creates a DataVolume with oc client. It can optionally wait until
    CDI imports finishes.
  params:
    - description: DataVolume to create
      name: manifest
      type: string
    - default: 'false'
      description: true if container should wait for Ready condition
      name: waitForSuccess
      type: string
  results:
    - description: The name of DataVolume that was created
      name: name
    - description: The namespace of DataVolume that was created
      name: namespace
  steps:
    - name: create
      image: quay.io/openshift/origin-cli:4.7
      script: |
        #!/usr/bin/env bash

        set -e

        TMP_DV_YAML_FILENAME="/tmp/datavolume.yaml"
        TMP_DV_RESULTS_FILENAME="/tmp/dv_results"

        echo "$(inputs.params.manifest)" > "$TMP_DV_YAML_FILENAME"

        if ! grep -q "kind: DataVolume$" "$TMP_DV_YAML_FILENAME"; then
            1>&2 echo "manifest does not contain DataVolume kind!"
            exit 1
        fi

        oc create -f "$TMP_DV_YAML_FILENAME" -o  jsonpath='{.metadata.name} {.metadata.namespace}' > "$TMP_DV_RESULTS_FILENAME"

        sed -i 's/ /\n/g' "$TMP_DV_RESULTS_FILENAME"
        readarray -t DV_OUTPUT_ARRAY < "$TMP_DV_RESULTS_FILENAME"

        DV_NAME="${DV_OUTPUT_ARRAY[0]}"
        DV_NAMESPACE="${DV_OUTPUT_ARRAY[1]}"

        echo -n "$DV_NAME" > /tekton/results/name
        echo -n "$DV_NAMESPACE" > /tekton/results/namespace

        echo "Created $DV_NAME Datavolume in $DV_NAMESPACE namespace."

        if [ "$(inputs.params.waitForSuccess)" == true ]; then
            echo "Waiting for Ready condition."
            # TODO: detect failed imports and don't wait until wait timeouts
            oc wait "datavolumes.cdi.kubevirt.io/$DV_NAME" --namespace="$DV_NAMESPACE" --for="condition=Ready" --timeout=720h
        fi
