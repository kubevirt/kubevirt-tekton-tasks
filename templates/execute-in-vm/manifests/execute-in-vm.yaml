---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  annotations:
    tekton.dev/pipelines.minVersion: "0.43.0"
    tekton.dev/categories: Automation
    tekton.dev/tags: kubevirt
    tekton.dev/displayName: "{{ display_name_provider }} {{ nice_name }}"
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/arm64"
    artifacthub.io/maintainers: |
      - name: {{ maintainer_name }}
        email: {{ maintainer_email }}
    artifacthub.io/provider: {{ provider }}
    artifacthub.io/recommendations: |
      - url: {{ recommendation_url }}
    artifacthub.io/category: integration-delivery
  labels:
    app.kubernetes.io/version: {{ catalog_version }}
  name: {{ task_name }}
spec:
  description: >-
    Run commands in KubeVirt virtual machine.
{% if is_cleanup %}
    This task can stop and delete VMs
{% endif %}
  params:
    - description: Name of a VM to execute the action in.
      name: vmName
      type: string
    - description: Namespace of a VM to execute the action in. (defaults to active namespace)
      name: vmNamespace
      type: string
      default: ""
{% if is_cleanup %}
    - description: Stops the VM after executing the commands when set to true.
      name: stop
      type: string
      default: "true"
    - description: Deletes the VM after executing the commands when set to true.
      name: delete
      type: string
      default: "false"
    - description: Timeout for the command/script (includes potential VM start). The VM will be stopped or deleted accordingly once the timout expires. Should be in a 3h2m1s format.
      name: timeout
      type: string
      default: "30m"
{% endif %}
    - description: Secret to use when connecting to a VM.
      name: secretName
      type: string
      default: "__empty__"
    - description: Command to execute in a VM.
      name: command
      type: array
      default: []
    - description: Arguments of a command.
      name: args
      type: array
      default: []
    - description: Script to execute in a VM.
      name: script
      type: string
      default: ""
  steps:
    - name: execute-in-vm
      image: "{{ main_image }}:{{ version }}"
      command:
        - entrypoint
      args:
{% if is_cleanup %}
        - '--stop'
        - $(params.stop)
        - '--delete'
        - $(params.delete)
        - '--timeout'
        - $(params.timeout)
{% endif %}
        - '--'
        - $(params.command)
        - $(params.args)
      env:
        - name: COMMAND
          value: execute-in-vm
        - name: VM_NAME
          value: $(params.vmName)
        - name: VM_NAMESPACE
          value: $(params.vmNamespace)
        - name: EXECUTE_SCRIPT
          value: $(params.script)
        - name: CONNECTION_SECRET_NAME
          value: $(params.secretName)
      volumeMounts:
        - mountPath: /data/connectionsecret/
          name: connectionsecret
          readOnly: true
      securityContext:
        runAsNonRoot: true
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - "ALL"
        seccompProfile:
          type: RuntimeDefault
  volumes:
    - name: connectionsecret
      secret:
        secretName: $(params.secretName)
        optional: true
